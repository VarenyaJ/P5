[build-system]
# setuptools builds the package; wheel lets pip build a .whl for faster installs
requires = ["setuptools>=65.6.3", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name                 =   "P5"
# version could be read from src/P5/__init__.py's __version__ attribute
# version            = { attr = "P5.__version__" }
description          = "Prompt-driven Parsing of Prenatal PDFs to Phenopackets"
readme               = "README.md"
requires-python      = ">=3.13"   # lock to Python 3.13 as per the Conda environment
license              = { file = "LICENSE" }
authors              = [{ name = "Varenya Jain", email = "varenyajj@gmail.com" }]
classifiers          = [
   "Programming Language :: Python :: 3.13",
   "License :: OSI Approved :: MIT License",
   "Operating System :: OS Independent",
]
keywords             = ["Global Alliance for Genomics and Health", "GA4GH", "Phenopacket", "GA4GH Phenopacket Schema", "Human Phenotype Ontology", "HPO", "Prenatal", "Fetal Sequencing Consortium"]

# version in __init__
dynamic = ["version", "dependencies"]

# Console-script entry-points to expose all the click commands
[project.scripts]
# top‚Äêlevel CLI group
p5                            = "P5.scripts.__main__:cli"
#pull-git-files                = "P5.scripts.pull_git_files:pull_git_files"
#create-pmid-pkl               = "P5.scripts.create_pmid_pkl:create_pmid_pkl"
#pmid-downloader               = "P5.scripts.pmid_downloader:pmid_downloader"
#create-phenopacket-dataset    = "P5.scripts.create_phenopacket_dataset:create_phenopacket_dataset"
#file-to-phenopacket           = "P5.scripts.file_to_phenopacket:file_to_phenopacket"

[project.urls]
homepage                    = "https://github.com/VarenyaJ/P5"
repository                  = "https://github.com/VarenyaJ/P5.git"
documentation               = "https://github.com/VarenyaJ/P5.git"
bugtracker                  = "https://github.com/VarenyaJ/P5/issues"

[tool.setuptools]
# all the code lives under src/, with a P5/ package
package-dir = { "" = "src" }
# packages    = ["P5", "P5.scripts", "P5.p5_pdf_parser"]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements/requirements.txt", "requirements/requirements_test.txt" ]}


# Omit the [project.dependencies] section entirely to leave all dependency management to Conda.